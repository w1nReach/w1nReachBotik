# main.py ‚Äî aiogram 3.7+
import asyncio
import json
import os
import sqlite3
import subprocess
from datetime import datetime, timezone
from urllib.parse import urlparse

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ChatType
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice,
    BotCommand, ReplyKeyboardMarkup, KeyboardButton, PreCheckoutQuery
)

import config

router = Router()
BOT_UN = ""  # username –±–æ—Ç–∞ (–±–µ–∑ @), –ø–æ–¥—Ö–≤–∞—Ç–∏–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

# ======================== –ë–ê–ó–ê –î–ê–ù–ù–´–• =========================

def _db_connect():
    os.makedirs(os.path.dirname(config.DB_PATH), exist_ok=True)
    conn = sqlite3.connect(config.DB_PATH, check_same_thread=False)
    conn.execute("PRAGMA journal_mode=WAL;")
    conn.execute("PRAGMA foreign_keys=ON;")
    return conn

DB = _db_connect()

def _db_init():
    DB.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id     INTEGER PRIMARY KEY,
            username    TEXT,
            is_admin    INTEGER DEFAULT 0,
            created_at  INTEGER NOT NULL
        );
    """)
    DB.execute("""
        CREATE TABLE IF NOT EXISTS subscriptions (
            id          INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id     INTEGER NOT NULL,
            plan        TEXT NOT NULL,
            created_at  INTEGER NOT NULL,
            expires_at  INTEGER,           -- NULL = –Ω–∞–≤—Å–µ–≥–¥–∞
            gifted_by   INTEGER,           -- –∫—Ç–æ –ø–æ–¥–∞—Ä–∏–ª (–µ—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫)
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        );
    """)
    # —Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞ channels –º–æ–≥–ª–∞ –±—ã—Ç—å –±–µ–∑ owner_id. —Å–æ–∑–¥–∞–¥–∏–º –µ—Å–ª–∏ –Ω–µ—Ç
    DB.execute("""
        CREATE TABLE IF NOT EXISTS channels (
            chat_id     INTEGER PRIMARY KEY,
            title       TEXT,
            added_at    INTEGER NOT NULL,
            owner_id    INTEGER,           -- –¥–æ–±–∞–≤–ª–µ–Ω–æ
            username    TEXT               -- –¥–æ–±–∞–≤–ª–µ–Ω–æ
        );
    """)
    # –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    cols = {r[1] for r in DB.execute("PRAGMA table_info(channels)")}
    if "owner_id" not in cols:
        DB.execute("ALTER TABLE channels ADD COLUMN owner_id INTEGER;")
    if "username" not in cols:
        DB.execute("ALTER TABLE channels ADD COLUMN username TEXT;")
    DB.commit()

_db_init()

def now_ts() -> int:
    return int(datetime.now(timezone.utc).timestamp())

def ensure_user(user_id: int, username: str | None):
    DB.execute(
        "INSERT OR IGNORE INTO users(user_id, username, is_admin, created_at) VALUES(?,?,?,?)",
        (user_id, (username or ""), 1 if user_id == getattr(config, "ADMIN_ID", 0) else 0, now_ts())
    )
    if username is not None:
        DB.execute("UPDATE users SET username=? WHERE user_id=?", (username, user_id))
    DB.commit()

def has_active_subscription(user_id: int) -> bool:
    ts = now_ts()
    cur = DB.execute("""
        SELECT 1 FROM subscriptions
        WHERE user_id = ?
          AND (expires_at IS NULL OR expires_at > ?)
        ORDER BY COALESCE(expires_at, 1<<62) DESC
        LIMIT 1
    """, (user_id, ts))
    return cur.fetchone() is not None

def grant_subscription(user_id: int, plan: str, gifted_by: int | None = None):
    created = now_ts()
    exp = None
    if plan == "week":
        exp = created + 7 * 24 * 3600
    elif plan == "month":
        exp = created + 30 * 24 * 3600
    elif plan == "year":
        exp = created + 365 * 24 * 3600
    elif plan == "forever":
        exp = None
    else:
        raise ValueError("Unknown plan")

    DB.execute(
        "INSERT INTO subscriptions(user_id, plan, created_at, expires_at, gifted_by) VALUES(?,?,?,?,?)",
        (user_id, plan, created, exp, gifted_by)
    )
    DB.commit()

# --- channels helpers (–ù–û–í–û–ï) ---
def channels_all_admin():
    cur = DB.execute("""
        SELECT c.chat_id, c.title, c.username, c.owner_id,
               COALESCE(u.username,'') AS owner_username
        FROM channels c
        LEFT JOIN users u ON u.user_id = c.owner_id
        ORDER BY c.added_at DESC
    """)
    return cur.fetchall()

def channels_by_owner(owner_id: int):
    cur = DB.execute("""
        SELECT chat_id, COALESCE(title,''), COALESCE(username,'')
        FROM channels
        WHERE owner_id=?
        ORDER BY added_at DESC
    """, (owner_id,))
    return cur.fetchall()

def channel_add_owned(owner_id: int, chat_id: int, title: str | None, username: str | None):
    DB.execute("""
        INSERT OR REPLACE INTO channels(chat_id, title, added_at, owner_id, username)
        VALUES(?,?,?,?,?)
    """, (chat_id, title or "", now_ts(), owner_id, (username or "")))
    DB.commit()

def channel_remove(chat_id: int):
    DB.execute("DELETE FROM channels WHERE chat_id=?", (chat_id,))
    DB.commit()

def admin_username_norm() -> str:
    u = getattr(config, "ADMIN_USERNAME", "") or ""
    return u.lstrip("@").lower()

def is_admin(user_id: int, username: str | None) -> bool:
    if user_id == getattr(config, "ADMIN_ID", 0):
        return True
    if username:
        return username.lower() == admin_username_norm()
    return False

def is_channel_allowed(chat_id: int) -> bool:
    # —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ–º –¢–û–õ–¨–ö–û –≤ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
    cur = DB.execute("SELECT 1 FROM channels WHERE chat_id=? LIMIT 1", (chat_id,))
    return cur.fetchone() is not None

# ======================== –¢–ï–ö–°–¢–´/–ö–ù–û–ü–ö–ò –õ–ò–ß–ö–ò =========================

HOWTO = (
    "<b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ Telegram Business</b>\n\n"
    "1) –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ë–∏–∑–Ω–µ—Å ‚Üí –ß–∞—Ç-–±–æ—Ç—ã ‚Üí –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞.\n"
    "2) –í—ã–±–µ—Ä–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ –¥–∞–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n\n"
    "–§–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: /button –ù–∞–∑–≤–∞–Ω–∏–µ \"https://example.com\" –∏–ª–∏ \"tg://settings\".\n"
    "–ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
)

def kb_private(user_id: int | None = None, username: str | None = None) -> ReplyKeyboardMarkup:
    rows = [
        [KeyboardButton(text="–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å")],
        [KeyboardButton(text="–ü–ª–∞–Ω—ã –∏ –æ–ø–ª–∞—Ç–∞")],
    ]
    # ¬´–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É¬ª ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –∏–ª–∏ –∞–¥–º–∏–Ω
    if user_id and (has_active_subscription(user_id) or is_admin(user_id, username)):
        rows.insert(1, [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É")])
        rows.append([KeyboardButton(text="–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª")])
        rows.append([KeyboardButton(text="–ú–æ–∏ –∫–∞–Ω–∞–ª—ã")])
    if user_id and is_admin(user_id, username):
        rows.append([KeyboardButton(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)

def kb_admin() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∏–∂–µ)", callback_data="admin:bindinfo")],
        [InlineKeyboardButton(text="üìã –ö–∞–Ω–∞–ª—ã (–≤—Å–µ)", callback_data="admin:listch")],
        [InlineKeyboardButton(text="üóë –û—Ç–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª (–ø–æ ID)", callback_data="admin:unbindask")],
        [InlineKeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin:grant")],
        [InlineKeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast")],
        [InlineKeyboardButton(text="üßÆ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
        [InlineKeyboardButton(text="üß© –°–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É (–º–∞—Å—Ç–µ—Ä)", callback_data="admin:makebtn")],
    ])

def kb_plans_inline() -> InlineKeyboardMarkup:
    p = config.PRICES_STARS
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üí≥ –ù–µ–¥–µ–ª—è ‚Äî {p['week']}‚≠ê", callback_data="buy:week"),
         InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å", callback_data="gift:week")],
        [InlineKeyboardButton(text=f"üí≥ –ú–µ—Å—è—Ü ‚Äî {p['month']}‚≠ê", callback_data="buy:month"),
         InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å", callback_data="gift:month")],
        [InlineKeyboardButton(text=f"üí≥ –ì–æ–¥ ‚Äî {p['year']}‚≠ê", callback_data="buy:year"),
         InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å", callback_data="gift:year")],
        [InlineKeyboardButton(text=f"üí≥ –ù–∞–≤—Å–µ–≥–¥–∞ ‚Äî {p['forever']}‚≠ê", callback_data="buy:forever"),
         InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å", callback_data="gift:forever")],
    ])

# ======================== –°–û–°–¢–û–Ø–ù–ò–Ø =========================

class CreateBtn(StatesGroup):
    text = State()
    label = State()
    url = State()

class AdminBind(StatesGroup):
    wait = State()      # –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–æ—Ä–≤–∞—Ä–¥–∞, –Ω–æ –æ—Å—Ç–∞–≤–∏–º, –µ—Å–ª–∏ –Ω–∞–¥–æ

class AdminUnbind(StatesGroup):
    wait = State()

class AdminBroadcast(StatesGroup):
    text = State()

class AdminGrant(StatesGroup):
    user = State()
    plan = State()

class GiftBuy(StatesGroup):
    plan = State()
    target = State()

class ChannelLink(StatesGroup):
    wait_forward = State()

# ======================== –£–¢–ò–õ–ò–¢–´ –ö–ù–û–ü–û–ö/–ü–ê–†–°–ò–ù–ì =========================

QUOTE_OPEN = ['"', '¬´', '‚Äú']
ALLOWED_SCHEMES = {"http", "https", "tg"}
MAX_BTNS = 8

def is_allowed_url(url: str) -> bool:
    try:
        p = urlparse(url)
    except Exception:
        return False
    if p.scheme not in ALLOWED_SCHEMES:
        return False
    if p.scheme in {"http", "https"}:
        return bool(p.netloc)
    if p.scheme == "tg":
        return True
    return False

def _find_next(text_lower: str, start: int, triggers_lower: list[str]):
    nxt, tlen = None, 0
    for t in triggers_lower:
        j = text_lower.find(t, start)
        if j != -1 and (nxt is None or j < nxt):
            nxt, tlen = j, len(t)
    return nxt, tlen

def parse_buttons_and_clean(text: str, triggers: list[str]):
    text_lower = text.lower()
    triggers_lower = [t.lower() for t in triggers]

    i = 0
    buttons, spans = [], []

    while True:
        idx, tlen = _find_next(text_lower, i, triggers_lower)
        if idx is None:
            break

        j = idx + tlen
        while j < len(text) and text[j].isspace():
            j += 1

        quote_pos, quote_char = None, None
        k = j
        while k < len(text):
            ch = text[k]
            if ch in QUOTE_OPEN:
                quote_pos, quote_char = k, ch
                break
            k += 1
        if quote_pos is None:
            i = j
            continue

        label = text[j:quote_pos].strip()
        if not label:
            i = quote_pos + 1
            continue

        close_char = {'¬´': '¬ª', '‚Äú': '‚Äù'}.get(quote_char, '"')
        url_start = quote_pos + 1
        url_end = text.find(close_char, url_start)
        if url_end == -1:
            i = url_start
            continue

        url = text[url_start:url_end].strip()
        if not is_allowed_url(url):
            i = url_end + 1
            continue

        buttons.append((label, url))
        spans.append((idx, url_end + 1))
        i = url_end + 1

        if len(buttons) >= MAX_BTNS:
            break

    if not buttons:
        return text, []

    out, last = [], 0
    for s, e in sorted(spans):
        out.append(text[last:s])
        last = e
    out.append(text[last:])
    clean = " ".join("".join(out).split()) or " "
    return clean, buttons

def build_kb_from_pairs(buttons: list[tuple[str, str]]) -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=label, url=url)] for label, url in buttons]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ======================== –ü–õ–ê–¢–Å–ñ–ò/–ü–û–î–ü–ò–°–ö–ò (Stars) =========================

PLANS = ("week", "month", "year", "forever")

def normalize_plan(s: str) -> str | None:
    s = (s or "").strip().lower()
    aliases = {
        "w": "week", "–Ω–µ–¥–µ–ª—è": "week",
        "m": "month", "–º–µ—Å—è—Ü": "month",
        "y": "year", "–≥–æ–¥": "year",
        "f": "forever", "–Ω–∞–≤—Å–µ–≥–¥–∞": "forever",
    }
    if s in PLANS:
        return s
    return aliases.get(s)

def plan_human(plan: str) -> str:
    return {
        "week": "1 –Ω–µ–¥–µ–ª—è",
        "month": "1 –º–µ—Å—è—Ü",
        "year": "1 –≥–æ–¥",
        "forever": "–ù–∞–≤—Å–µ–≥–¥–∞",
    }[plan]

def calc_price_stars(plan: str, *, is_gift: bool, buyer_has_sub: bool) -> int:
    base = int(config.PRICES_STARS[plan])
    if is_gift and buyer_has_sub:
        return max(1, round(base * (100 - int(config.GIFT_DISCOUNT_PCT)) / 100))
    return base

def make_invoice_payload(data: dict) -> str:
    return json.dumps(data, separators=(",", ":"), ensure_ascii=False)

def parse_invoice_payload(payload: str) -> dict:
    try:
        return json.loads(payload)
    except Exception:
        return {}

async def send_subscription_invoice(m: Message, plan: str, *, gift_to_user_id: int | None = None, gift_to_username: str | None = None):
    buyer_id = m.from_user.id
    buyer_has = has_active_subscription(buyer_id)
    price = calc_price_stars(plan, is_gift=(gift_to_user_id is not None or gift_to_username is not None), buyer_has_sub=buyer_has)

    title = f"–ü–æ–¥–ø–∏—Å–∫–∞: {plan_human(plan)}"
    if gift_to_user_id or gift_to_username:
        title += " (–ø–æ–¥–∞—Ä–æ–∫)"

    desc_lines = [f"–î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–∞–Ω–∞–ª–æ–≤.", f"–°—Ä–æ–∫: {plan_human(plan)}."]
    if gift_to_user_id or gift_to_username:
        desc_lines.append("–≠—Ç–æ –ø–æ–¥–∞—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        if buyer_has:
            desc_lines.append(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ -{config.GIFT_DISCOUNT_PCT}%.")
        else:
            desc_lines.append("–£ –¥–∞—Ä–∏—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî —Å–∫–∏–¥–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.")
    description = "\n".join(desc_lines)

    payload = make_invoice_payload({
        "kind": "subscription",
        "type": "gift" if (gift_to_user_id or gift_to_username) else "self",
        "plan": plan,
        "gift_to_user_id": gift_to_user_id,
        "gift_to_username": gift_to_username,
    })

    prices = [LabeledPrice(label=f"{plan_human(plan)}", amount=price)]  # XTR

    await m.bot.send_invoice(
        chat_id=m.chat.id,
        title=title,
        description=description,
        payload=payload,
        provider_token="",                 # Stars: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        currency="XTR",                    # Stars
        prices=prices,
        need_name=False,
        need_email=False,
        is_flexible=False,
        start_parameter=f"{plan}-stars"
    )

# ======================== –•–ï–õ–ü–ï–†: –û–¢–ü–†–ê–í–ö–ê/–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –° –£–ß–Å–¢–û–ú –ú–ï–î–ò–ê =========================

async def edit_or_send_with_media(m: Message, clean_text: str, buttons: list[tuple[str, str]]):
    kb = build_kb_from_pairs(buttons)
    has_photo = bool(m.photo)
    has_video = bool(m.video)

    # –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏—è
    if m.business_connection_id:
        if has_photo or has_video:
            await m.bot.edit_message_caption(
                business_connection_id=m.business_connection_id,
                chat_id=m.chat.id,
                message_id=m.message_id,
                caption=clean_text,
                reply_markup=kb
            )
        else:
            await m.bot.edit_message_text(
                business_connection_id=m.business_connection_id,
                chat_id=m.chat.id,
                message_id=m.message_id,
                text=clean_text,
                reply_markup=kb
            )
        return

    # –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã
    try:
        await m.bot.delete_message(m.chat.id, m.message_id)
    except Exception:
        pass

    if has_photo:
        await m.bot.send_photo(
            chat_id=m.chat.id,
            photo=m.photo[-1].file_id,
            caption=clean_text,
            reply_markup=kb
        )
    elif has_video:
        vid = getattr(m.video, "file_id", None) or (m.video[-1].file_id if isinstance(m.video, list) else None)
        await m.bot.send_video(
            chat_id=m.chat.id,
            video=vid,
            caption=clean_text,
            reply_markup=kb
        )
    else:
        await m.bot.send_message(chat_id=m.chat.id, text=clean_text, reply_markup=kb)

# ======================== –õ–ò–ß–ö–ê: –ë–ê–ó–û–í–û–ï =========================

@router.message(CommandStart(), (F.chat.type == ChatType.PRIVATE))
async def start_private(m: Message):
    ensure_user(m.from_user.id, m.from_user.username)
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ Telegram Business.\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –±–∏–∑–Ω–µ—Å-—á–∞—Ç–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö ‚Äî –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /plans, /buy, /gift, /status, /howto, /admin\n",
        reply_markup=kb_private(m.from_user.id, m.from_user.username)
    )

@router.message(Command("howto"), (F.chat.type == ChatType.PRIVATE))
@router.message(F.text.lower() == "–∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å", (F.chat.type == ChatType.PRIVATE))
async def howto_private(m: Message):
    await m.answer(HOWTO, reply_markup=kb_private(m.from_user.id, m.from_user.username))

# ======================== –õ–ò–ß–ö–ê: –ü–õ–ê–ù–´/–°–¢–ê–¢–£–°/–ü–û–ö–£–ü–ö–ê/–ü–û–î–ê–†–û–ö =========================

@router.message(F.text.lower() == "–ø–ª–∞–Ω—ã –∏ –æ–ø–ª–∞—Ç–∞", (F.chat.type == ChatType.PRIVATE))
@router.message(Command("plans"), (F.chat.type == ChatType.PRIVATE))
async def plans_cmd(m: Message):
    prices = config.PRICES_STARS
    lines = [
        "<b>–ü–æ–¥–ø–∏—Å–∫–∏ (Telegram Stars)</b>",
        f"‚Ä¢ –ù–µ–¥–µ–ª—è ‚Äî {prices['week']}‚≠ê",
        f"‚Ä¢ –ú–µ—Å—è—Ü ‚Äî {prices['month']}‚≠ê",
        f"‚Ä¢ –ì–æ–¥ ‚Äî {prices['year']}‚≠ê",
        f"‚Ä¢ –ù–∞–≤—Å–µ–≥–¥–∞ ‚Äî {prices['forever']}‚≠ê",
        "",
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø–æ–¥–∞—Ä–∏—Ç—å.",
        "–°–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ ‚àí25% —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –¥–∞—Ä–∏—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.",
    ]
    await m.answer("\n".join(lines), reply_markup=kb_plans_inline())

@router.message(Command("status"), (F.chat.type == ChatType.PRIVATE))
async def status_cmd(m: Message):
    ensure_user(m.from_user.id, m.from_user.username)
    active = has_active_subscription(m.from_user.id)
    if not active:
        await m.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. /plans ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã.",
                       reply_markup=kb_private(m.from_user.id, m.from_user.username))
        return

    cur = DB.execute("""
        SELECT plan, expires_at, gifted_by, created_at
        FROM subscriptions
        WHERE user_id=?
        ORDER BY COALESCE(expires_at, 1<<62) DESC, id DESC
        LIMIT 1
    """, (m.from_user.id,))
    row = cur.fetchone()
    if not row:
        await m.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. /plans",
                       reply_markup=kb_private(m.from_user.id, m.from_user.username))
        return

    plan, expires_at, gifted_by, created_at = row
    if expires_at is None:
        exp_str = "–Ω–∏–∫–æ–≥–¥–∞ (–Ω–∞–≤—Å–µ–≥–¥–∞)"
    else:
        dt = datetime.fromtimestamp(expires_at, tz=timezone.utc)
        exp_str = dt.strftime("%Y-%m-%d %H:%M UTC")

    s = [
        f"<b>–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>: {plan_human(plan)}",
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {exp_str}",
    ]
    if gifted_by:
        s.append(f"–ü–æ–ª—É—á–µ–Ω–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫ (–æ—Ç ID {gifted_by}).")
    await m.answer("\n".join(s), reply_markup=kb_private(m.from_user.id, m.from_user.username))

@router.message(Command("buy"), (F.chat.type == ChatType.PRIVATE))
async def buy_cmd(m: Message):
    ensure_user(m.from_user.id, m.from_user.username)
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–§–æ—Ä–º–∞—Ç: /buy <week|month|year|forever>",
                       reply_markup=kb_private(m.from_user.id, m.from_user.username))
        return
    plan = normalize_plan(parts[1])
    if plan is None:
        await m.answer("–ù–µ –ø–æ–Ω—è–ª –ø–ª–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π: week, month, year, forever.",
                       reply_markup=kb_private(m.from_user.id, m.from_user.username))
        return
    await send_subscription_invoice(m, plan)

@router.message(Command("gift"), (F.chat.type == ChatType.PRIVATE))
async def gift_cmd(m: Message):
    ensure_user(m.from_user.id, m.from_user.username)
    if not has_active_subscription(m.from_user.id):
        await m.answer("–î–∞—Ä–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏ /buy.",
                       reply_markup=kb_private(m.from_user.id, m.from_user.username))
        return
    parts = (m.text or "").split()
    if len(parts) < 2:
        await m.answer("–§–æ—Ä–º–∞—Ç: –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è ‚Äî /gift <plan>\n–∏–ª–∏ /gift <plan> @username",
                       reply_markup=kb_private(m.from_user.id, m.from_user.username))
        return
    plan = normalize_plan(parts[1])
    if plan is None:
        await m.answer("–ù–µ –ø–æ–Ω—è–ª –ø–ª–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π: week, month, year, forever.",
                       reply_markup=kb_private(m.from_user.id, m.from_user.username))
        return

    gift_to_user_id = None
    gift_to_username = None

    if m.reply_to_message and m.reply_to_message.from_user:
        gift_to_user_id = m.reply_to_message.from_user.id
        ensure_user(gift_to_user_id, m.reply_to_message.from_user.username)
    else:
        if len(parts) >= 3 and parts[2].startswith("@"):
            gift_to_username = parts[2][1:]
        else:
            await m.answer("–£–∫–∞–∂–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å @username.",
                           reply_markup=kb_private(m.from_user.id, m.from_user.username))
            return

    await send_subscription_invoice(m, plan, gift_to_user_id=gift_to_user_id, gift_to_username=gift_to_username)

@router.callback_query(F.data.startswith("buy:"))
async def cb_buy(cq: CallbackQuery):
    if cq.message.chat.type != ChatType.PRIVATE:
        await cq.answer("–û—Ç–∫—Ä–æ–π –º–µ–Ω—è –≤ –ª–∏—á–∫–µ, —Ç–∞–º –æ—Ñ–æ—Ä–º–∏–º –ø–æ–∫—É–ø–∫—É.", show_alert=True)
        return
    plan = normalize_plan(cq.data.split(":", 1)[1])
    if not plan:
        await cq.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    await send_subscription_invoice(cq.message, plan)
    await cq.answer()

@router.callback_query(F.data.startswith("gift:"))
async def cb_gift(cq: CallbackQuery, state: FSMContext):
    if cq.message.chat.type != ChatType.PRIVATE:
        await cq.answer("–û—Ç–∫—Ä–æ–π –º–µ–Ω—è –≤ –ª–∏—á–∫–µ, —Ç–∞–º –æ—Ñ–æ—Ä–º–∏–º –ø–æ–¥–∞—Ä–æ–∫.", show_alert=True)
        return
    if not has_active_subscription(cq.from_user.id):
        await cq.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏ —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É ‚Äî —Ç–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–∫–∏–¥–∫–∞ ‚àí25% –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫.", show_alert=True)
        return
    plan = normalize_plan(cq.data.split(":", 1)[1])
    if not plan:
        await cq.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    await state.set_state(GiftBuy.target)
    await state.update_data(plan=plan)
    await cq.message.answer(
        "–ö–æ–º—É –ø–æ–¥–∞—Ä–∏—Ç—å? –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ò–õ–ò –ø—Ä–∏—à–ª–∏ @username.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã—Å—Ç–∞–≤–ª—é —Å—á—ë—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π ‚àí25%."
    )
    await cq.answer()

@router.message(GiftBuy.target, (F.chat.type == ChatType.PRIVATE))
async def gift_target_step(m: Message, state: FSMContext):
    data = await state.get_data()
    plan = data.get("plan")

    gift_to_user_id = None
    gift_to_username = None

    if m.reply_to_message and m.reply_to_message.from_user:
        gift_to_user_id = m.reply_to_message.from_user.id
        ensure_user(gift_to_user_id, m.reply_to_message.from_user.username)
    else:
        t = (m.text or "").strip()
        if t.startswith("@"):
            gift_to_username = t[1:]
        else:
            await m.answer("–£–∫–∞–∂–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ @username.")
            return

    await send_subscription_invoice(
        m, plan,
        gift_to_user_id=gift_to_user_id,
        gift_to_username=gift_to_username
    )
    await state.clear()

# ======================== –ú–ê–°–¢–ï–† "–°–û–ó–î–ê–¢–¨ –ö–ù–û–ü–ö–£" (–ª–∏—á–∫–∞) =========================

@router.message((F.chat.type == ChatType.PRIVATE) & (F.text == "–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É"))
async def create_btn_start(m: Message, state: FSMContext):
    if not (has_active_subscription(m.from_user.id) or is_admin(m.from_user.id, m.from_user.username)):
        await m.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –û—Ñ–æ—Ä–º–∏ /plans –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è üôå",
                       reply_markup=kb_private(m.from_user.id, m.from_user.username))
        return
    await state.set_state(CreateBtn.text)
    await m.answer(
        "–û–∫! –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —è –æ–ø—É–±–ª–∏–∫—É—é —Å –∫–Ω–æ–ø–∫–æ–π.\n\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML (<b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i> –∏ —Ç.–¥.).\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel",
        reply_markup=kb_private(m.from_user.id, m.from_user.username)
    )

@router.message(Command("cancel"), (F.chat.type == ChatType.PRIVATE))
async def create_btn_cancel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–û—Ç–º–µ–Ω–∏–ª. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb_private(m.from_user.id, m.from_user.username))

@router.message(CreateBtn.text, (F.chat.type == ChatType.PRIVATE))
async def create_btn_got_text(m: Message, state: FSMContext):
    await state.update_data(text=m.html_text or (m.text or ""))
    await state.set_state(CreateBtn.label)
    await m.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (–Ω–∞–¥–ø–∏—Å—å –Ω–∞ –∫–Ω–æ–ø–∫–µ).")

@router.message(CreateBtn.label, (F.chat.type == ChatType.PRIVATE))
async def create_btn_got_label(m: Message, state: FSMContext):
    label = (m.text or "").strip()
    if not label:
        await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏.")
        return
    await state.update_data(label=label)
    await state.set_state(CreateBtn.url)
    await m.answer("–ò –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ö–µ–º—ã: http/https/tg (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com –∏–ª–∏ tg://settings).")

@router.message(CreateBtn.url, (F.chat.type == ChatType.PRIVATE))
async def create_btn_got_url(m: Message, state: FSMContext):
    url = (m.text or "").strip().strip("‚Äú‚Äù¬´¬ª\"'")
    if not is_allowed_url(url):
        await m.answer(
            "–°—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ö–µ–º—ã: http, https, tg.\n"
            "–ü—Ä–∏–º–µ—Ä: https://example.com –∏–ª–∏ tg://settings\n"
            "–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel."
        )
        return
    data = await state.get_data()
    text = (data.get("text") or "").strip() or " "
    label = data.get("label") or "–û—Ç–∫—Ä—ã—Ç—å"
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=label, url=url)]])
    await m.answer(text, reply_markup=kb)
    await state.clear()
    await m.answer("–ì–æ—Ç–æ–≤–æ! –•–æ—á–µ—à—å –µ—â—ë –æ–¥–Ω—É? –ù–∞–∂–º–∏ ¬´–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É¬ª.",
                   reply_markup=kb_private(m.from_user.id, m.from_user.username))

# ======================== PAYMENTS CALLBACKS =========================

@router.pre_checkout_query()
async def on_pre_checkout(q: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(q.id, ok=True)

@router.message(F.successful_payment)
async def on_success_payment(m: Message):
    sp = m.successful_payment
    data = parse_invoice_payload(sp.invoice_payload)
    kind = data.get("kind")
    if kind != "subscription":
        await m.answer("–ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Ç–∏–ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ù–∞–ø–∏—à–∏ /support.")
        return

    plan = data.get("plan")
    if plan not in PLANS:
        await m.answer("–ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø–ª–∞–Ω –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ù–∞–ø–∏—à–∏ /support.")
        return

    buyer_id = m.from_user.id
    ensure_user(buyer_id, m.from_user.username)

    if data.get("type") == "gift":
        to_uid = data.get("gift_to_user_id")
        to_un = data.get("gift_to_username")
        if to_uid:
            ensure_user(to_uid, None)
            grant_subscription(to_uid, plan, gifted_by=buyer_id)
            await m.answer(f"–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ¬´{plan_human(plan)}¬ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è ID {to_uid}.")
            try:
                await m.bot.send_message(to_uid, f"–¢–µ–±–µ –ø–æ–¥–∞—Ä–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É: {plan_human(plan)} üéÅ")
            except Exception:
                pass
        else:
            grant_subscription(buyer_id, plan, gifted_by=buyer_id)  # –≤—Ä–µ–º–µ–Ω–Ω–æ —É –¥–∞—Ä–∏—Ç–µ–ª—è
            await m.answer(
                "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞. –Ø –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª –ø–æ–¥–ø–∏—Å–∫—É –∫ —Ç–µ–±–µ. "
                "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É, –ø–µ—Ä–µ—à–ª—é ‚Äî –ø—Ä–∏—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /activategift @username"
            )
    else:
        grant_subscription(buyer_id, plan)
        await m.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {plan_human(plan)} ‚úÖ")

@router.message(Command("activategift"), (F.chat.type == ChatType.PRIVATE))
async def activate_gift(m: Message):
    parts = (m.text or "").split(maxsplit=1)
    if len(parts) < 2 or not parts[1].startswith("@"):
        await m.answer("–§–æ—Ä–º–∞—Ç: /activategift @username",
                       reply_markup=kb_private(m.from_user.id, m.from_user.username))
        return
    username = parts[1][1:]

    cur = DB.execute("SELECT user_id FROM users WHERE lower(username)=lower(?)", (username.lower(),))
    row = cur.fetchone()
    if not row:
        await m.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É. –ü–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –Ω–∞–∂–∞—Ç—å /start.",
                       reply_markup=kb_private(m.from_user.id, m.from_user.username))
        return
    target_id = int(row[0])

    cur2 = DB.execute("""
        SELECT id, plan, created_at, expires_at FROM subscriptions
        WHERE user_id=? ORDER BY id DESC LIMIT 1
    """, (m.from_user.id,))
    last = cur2.fetchone()
    if not last:
        await m.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.",
                       reply_markup=kb_private(m.from_user.id, m.from_user.username))
        return
    sid, plan, created_at, expires_at = last

    DB.execute("DELETE FROM subscriptions WHERE id=?", (sid,))
    DB.commit()

    DB.execute(
        "INSERT INTO subscriptions(user_id, plan, created_at, expires_at, gifted_by) VALUES(?,?,?,?,?)",
        (target_id, plan, created_at, expires_at, m.from_user.id)
    )
    DB.commit()

    await m.answer(f"–ü–æ–¥–∞—Ä–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è @{username} ({plan_human(plan)}).")
    try:
        await m.bot.send_message(target_id, f"–¢–µ–±–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫: {plan_human(plan)} üéÅ")
    except Exception:
        pass

# ======================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê–ú–ò (–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨) =========================

@router.message((F.chat.type == ChatType.PRIVATE) & (F.text == "–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª"))
async def user_link_channel(m: Message, state: FSMContext):
    if not (has_active_subscription(m.from_user.id) or is_admin(m.from_user.id, m.from_user.username)):
        await m.answer("–ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.",
                       reply_markup=kb_private(m.from_user.id, m.from_user.username))
        return
    await m.answer("–ü–µ—Ä–µ—à–ª–∏ —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä–∏–≤—è–∑–∞—Ç—å.\n"
                   "–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º (creator) –∫–∞–Ω–∞–ª–∞, –∞ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞.")
    await state.set_state(ChannelLink.wait_forward)

@router.message(ChannelLink.wait_forward, (F.chat.type == ChatType.PRIVATE))
async def user_link_channel_step(m: Message, state: FSMContext):
    ch = getattr(m, "forward_from_chat", None)
    if not ch or ch.type != ChatType.CHANNEL:
        await m.answer("–≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.\n"
                       "–ü–µ—Ä–µ—à–ª–∏ –õ–Æ–ë–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        return

    chat_id = ch.id
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
    try:
        me_member = await m.bot.get_chat_member(chat_id, (await m.bot.get_me()).id)
        if me_member.status not in ("administrator", "creator"):
            await m.answer("–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞. –î–æ–±–∞–≤—å –µ–≥–æ –∞–¥–º–∏–Ω–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–∏.")
            return
    except Exception:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω.")
        return

    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü (creator)
    try:
        admins = await m.bot.get_chat_administrators(chat_id)
        creator = next((a for a in admins if a.status == "creator"), None)
        if not creator or creator.user.id != m.from_user.id:
            await m.answer("–¢—ã –Ω–µ —è–≤–ª—è–µ—à—å—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º (creator) —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
            return
    except Exception:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞.")
        return

    channel_add_owned(m.from_user.id, chat_id, ch.title, ch.username)
    await state.clear()
    await m.answer(f"–ö–∞–Ω–∞–ª <b>{ch.title}</b> –ø—Ä–∏–≤—è–∑–∞–Ω ‚úÖ",
                   reply_markup=kb_private(m.from_user.id, m.from_user.username))

@router.message((F.chat.type == ChatType.PRIVATE) & (F.text == "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã"))
async def my_channels_list(m: Message):
    rows = channels_by_owner(m.from_user.id)
    if not rows:
        await m.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    kb = []
    text_lines = ["<b>–¢–≤–æ–∏ –∫–∞–Ω–∞–ª—ã:</b>"]
    for chat_id, title, uname in rows:
        uname_t = f"@{uname}" if uname else "‚Äî"
        text_lines.append(f"‚Ä¢ {title} ({uname_t}) ‚Äî <code>{chat_id}</code>")
        kb.append([InlineKeyboardButton(text=f"–û—Ç–≤—è–∑–∞—Ç—å ¬´{title}¬ª", callback_data=f"unlink:{chat_id}")])
    await m.answer("\n".join(text_lines), reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))

@router.callback_query(F.data.startswith("unlink:"))
async def unlink_channel_cb(cq: CallbackQuery):
    chat_id = int(cq.data.split(":", 1)[1])

    # –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω ‚Äî –º–æ–∂–Ω–æ –æ—Ç–≤—è–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∫–∞–Ω–∞–ª
    if not is_admin(cq.from_user.id, cq.from_user.username):
        cur = DB.execute("SELECT owner_id FROM channels WHERE chat_id=?", (chat_id,))
        row = cur.fetchone()
        if not row or int(row[0]) != cq.from_user.id:
            await cq.answer("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.", show_alert=True)
            return

    # –≤—ã–π—Ç–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
    try:
        await cq.bot.leave_chat(chat_id)
    except Exception:
        pass
    channel_remove(chat_id)
    await cq.answer("–ö–∞–Ω–∞–ª –æ—Ç–≤—è–∑–∞–Ω.", show_alert=True)
    try:
        await cq.message.delete()
    except Exception:
        pass

# ======================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ =========================

@router.message((F.chat.type == ChatType.PRIVATE) & (F.text.lower() == "–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
@router.message(Command("admin"), (F.chat.type == ChatType.PRIVATE))
async def admin_panel(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id, m.from_user.username):
        return
    await state.clear()
    await m.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=kb_private(m.from_user.id, m.from_user.username))
    await m.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_admin())

def _parse_chat_ref(text: str) -> tuple[int | None, str | None]:
    t = (text or "").strip()
    if not t:
        return None, None
    if t.startswith("@"):
        return None, t[1:].lower()
    try:
        cid = int(t)
        return cid, None
    except Exception:
        return None, None

@router.callback_query(F.data.startswith("admin:"))
async def admin_callbacks(cq: CallbackQuery, state: FSMContext):
    if not is_admin(cq.from_user.id, cq.from_user.username):
        await cq.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞", show_alert=True)
        return

    action = cq.data.split(":", 1)[1]

    if action == "bindinfo":
        await cq.message.answer(
            "üîó <b>–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):</b>\n"
            "1) –î–æ–±–∞–≤—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º –≤ —Å–≤–æ—ë–º –∫–∞–Ω–∞–ª–µ.\n"
            "2) –í –ª–∏—á–∫–µ –Ω–∞–∂–º–∏ ¬´–ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª¬ª –∏ –ø–µ—Ä–µ—à–ª–∏ —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.\n"
            "3) –ö–∞–Ω–∞–ª –ø–æ—è–≤–∏—Ç—Å—è –≤ ¬´–ú–æ–∏ –∫–∞–Ω–∞–ª—ã¬ª.",
        )
        await cq.answer()
    elif action == "listch":
        rows = channels_all_admin()
        if not rows:
            await cq.message.answer("–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
            await cq.answer()
            return
        out = ["<b>–í—Å–µ –∫–∞–Ω–∞–ª—ã:</b>"]
        kb = []
        for chat_id, title, uname, owner_id, owner_username in rows:
            owner_tag = f"@{owner_username}" if owner_username else owner_id
            uname_t = f"@{uname}" if uname else "‚Äî"
            out.append(f"‚Ä¢ {title} ({uname_t}) ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü {owner_tag} ‚Äî <code>{chat_id}</code>")
            kb.append([InlineKeyboardButton(text=f"–û—Ç–≤—è–∑–∞—Ç—å ¬´{title}¬ª", callback_data=f"unlink:{chat_id}")])
        await cq.message.answer("\n".join(out), reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
        await cq.answer()
    elif action == "unbindask":
        await cq.message.answer("–ü—Ä–∏—à–ª–∏ -100id –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ @username –¥–ª—è –æ—Ç–≤—è–∑–∫–∏.")
        await state.set_state(AdminUnbind.wait)
        await cq.answer()
    elif action == "grant":
        await state.set_state(AdminGrant.user)
        await cq.message.answer("–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏: –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–∏—à–ª–∏ @username/ID.")
        await cq.answer()
    elif action == "broadcast":
        await state.set_state(AdminBroadcast.text)
        await cq.message.answer("–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏? (HTML —Ä–∞–∑—Ä–µ—à—ë–Ω). –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        await cq.answer()
    elif action == "stats":
        cur = DB.execute("SELECT COUNT(*) FROM users")
        users = cur.fetchone()[0]
        cur = DB.execute("""
            SELECT COUNT(DISTINCT user_id)
            FROM subscriptions
            WHERE expires_at IS NULL OR expires_at > ?
        """, (now_ts(),))
        active = cur.fetchone()[0]
        await cq.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active}")
        await cq.answer()
    elif action == "makebtn":
        await state.set_state(CreateBtn.text)
        await cq.message.answer(
            "–û–∫! –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —è –æ–ø—É–±–ª–∏–∫—É—é —Å –∫–Ω–æ–ø–∫–æ–π.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel"
        )
        await cq.answer()

@router.message(AdminUnbind.wait, (F.chat.type == ChatType.PRIVATE))
async def admin_unbind_receive(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id, m.from_user.username):
        return
    cid, uname = _parse_chat_ref(m.text or "")
    target_chat_id = None
    if uname:
        try:
            chat = await m.bot.get_chat("@"+uname)
            target_chat_id = chat.id
        except Exception:
            await m.answer("–ù–µ –Ω–∞—à—ë–ª –∫–∞–Ω–∞–ª –ø–æ @username.")
            return
    elif cid:
        target_chat_id = cid
    else:
        await m.answer("–ü—Ä–∏—à–ª–∏ @username –∏–ª–∏ -100id.")
        return

    try:
        await m.bot.leave_chat(target_chat_id)
    except Exception:
        pass
    channel_remove(target_chat_id)
    await state.clear()
    await m.answer(f"–ö–∞–Ω–∞–ª <code>{target_chat_id}</code> –æ—Ç–≤—è–∑–∞–Ω.")

@router.message(AdminBroadcast.text, (F.chat.type == ChatType.PRIVATE))
async def admin_broadcast_send(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id, m.from_user.username):
        return
    text = m.html_text or (m.text or "")
    cur = DB.execute("SELECT user_id FROM users")
    ids = [int(r[0]) for r in cur.fetchall()]
    ok, fail = 0, 0
    for uid in ids:
        try:
            await m.bot.send_message(uid, text)
            ok += 1
        except Exception:
            fail += 1
    await state.clear()
    await m.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—Ö–æ–≤: {ok}, –æ—à–∏–±–æ–∫: {fail}.")

@router.message(AdminGrant.user, (F.chat.type == ChatType.PRIVATE))
async def admin_grant_user(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id, m.from_user.username):
        return

    target_id = None
    if m.reply_to_message and m.reply_to_message.from_user:
        target_id = m.reply_to_message.from_user.id
        ensure_user(target_id, m.reply_to_message.from_user.username)
    else:
        t = (m.text or "").strip()
        if t.startswith("@"):
            uname = t[1:]
            cur = DB.execute("SELECT user_id FROM users WHERE lower(username)=lower(?)", (uname.lower(),))
            row = cur.fetchone()
            if row:
                target_id = int(row[0])
        elif t.isdigit():
            target_id = int(t)

    if not target_id:
        await m.answer("–ü—Ä–∏—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: reply, @username (–µ—Å–ª–∏ —É–∂–µ –ø–∏—Å–∞–ª –±–æ—Ç—É) –∏–ª–∏ numeric user_id.")
        return

    await state.update_data(target_id=target_id)
    await state.set_state(AdminGrant.plan)
    await m.answer("–ö–∞–∫–æ–π –ø–ª–∞–Ω –≤—ã–¥–∞—Ç—å? (week|month|year|forever)")

@router.message(AdminGrant.plan, (F.chat.type == ChatType.PRIVATE))
async def admin_grant_plan(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id, m.from_user.username):
        return
    plan = normalize_plan((m.text or "").strip().lower())
    if plan not in PLANS:
        await m.answer("–ù–µ –ø–æ–Ω—è–ª –ø–ª–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π: week, month, year, forever.")
        return
    data = await state.get_data()
    target_id = int(data["target_id"])
    grant_subscription(target_id, plan, gifted_by=m.from_user.id)
    await state.clear()
    await m.answer(f"–í—ã–¥–∞–ª –ø–æ–¥–ø–∏—Å–∫—É {plan_human(plan)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{target_id}</code> ‚úÖ")
    try:
        await m.bot.send_message(target_id, f"–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {plan_human(plan)} ‚úÖ")
    except Exception:
        pass

# ======================== –ë–ò–ó–ù–ï–°/–ö–ê–ù–ê–õ–´ (—Å —É—á—ë—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏) =========================

@router.business_message(F.text | F.caption)
async def business_handler(m: Message):
    if not (m.from_user and has_active_subscription(m.from_user.id)):
        try:
            await m.bot.send_message(
                m.from_user.id,
                "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. /plans"
            )
        except Exception:
            pass
        return

    triggers = ["/button"]
    if BOT_UN:
        triggers.append(f"@{BOT_UN}")
    text = m.text or m.caption or ""
    if not any(t.lower() in text.lower() for t in triggers):
        return
    clean_text, buttons = parse_buttons_and_clean(text, triggers)
    if not buttons:
        return
    await edit_or_send_with_media(m, clean_text, buttons)

@router.channel_post(F.text | F.caption)
async def channel_handler(m: Message):
    if not is_channel_allowed(m.chat.id):
        return

    triggers = ["/button"]
    if BOT_UN:
        triggers.append(f"@{BOT_UN}")
    text = m.text or m.caption or ""
    if not any(t.lower() in text.lower() for t in triggers):
        return
    clean_text, buttons = parse_buttons_and_clean(text, triggers)
    if not buttons:
        return
    await edit_or_send_with_media(m, clean_text, buttons)

# ======================== –ê–í–¢–û-–û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ó GIT =========================

def _git(cmd: list[str]) -> str:
    out = subprocess.check_output(cmd, cwd=os.getcwd())
    return out.decode("utf-8", "ignore").strip()

def _has_git_repo() -> bool:
    return os.path.isdir(os.path.join(os.getcwd(), ".git"))

async def git_autoupdate_loop():
    if not getattr(config, "AUTO_UPDATE_ENABLED", False):
        return
    interval = getattr(config, "AUTO_UPDATE_INTERVAL_MIN", 10)
    remote = getattr(config, "GIT_REMOTE", "origin")
    branch = getattr(config, "GIT_BRANCH", "main")
    while True:
        try:
            if _has_git_repo():
                _git(["git", "fetch", remote, branch])
                local = _git(["git", "rev-parse", "HEAD"])
                remote_head = _git(["git", "rev-parse", f"{remote}/{branch}"])
                if local != remote_head:
                    _git(["git", "pull", "--ff-only", remote, branch])
                    os._exit(0)  # systemd –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç
        except Exception:
            pass
        await asyncio.sleep(max(1, int(interval)) * 60)

# ======================== –¢–û–ß–ö–ê –í–•–û–î–ê =========================

async def main():
    global BOT_UN
    bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    me = await bot.get_me()
    BOT_UN = (me.username or "").lower()

    dp = Dispatcher()
    dp.include_router(router)

    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫"),
        BotCommand(command="howto", description="–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫ Business"),
        BotCommand(command="plans", description="–ü–ª–∞–Ω—ã –∏ –æ–ø–ª–∞—Ç–∞"),
        BotCommand(command="buy", description="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="gift", description="–ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (-25%)"),
        BotCommand(command="status", description="–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand(command="admin", description="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"),
    ])

    # –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ git
    asyncio.create_task(git_autoupdate_loop())

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
